##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# # Default server configuration
# server {
#     listen 80;
#     server_name localhost;

#     location /adminer/ {
#         return 301 https://$host$request_uri; 
# 	}

# 	location /website/ {
# 	return 301 https://$host$request_uri; 
# 	}
# }	

server {
	listen 443 ssl http2;
	listen [::]:443 ssl http2;

	# SSL configuration
	ssl_certificate /etc/nginx/ssl/nginx.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx.key;
	ssl_protocols TLSv1.2 TLSv1.3;
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	root /var/www/html;

	# Add index.php to the list if you are using PHP
	index index.php index.html index.htm index.nginx-debian.html;

	server_name localhost;

	# location /adminer/ {
	# 	# Forward the request to Adminer running on port 8080
	# 	proxy_pass http://adminer:8080/;

	# 	# Remove the /adminer prefix before forwarding the request to Adminer
	# 	rewrite ^/adminer(/.*)$ $1 break;

	# 	# Forward the original headers to Adminer
	# 	proxy_set_header Host $host;
	# 	proxy_set_header X-Real-IP $remote_addr;  # Real client IP
	# 	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Forwarded client IPs
	# 	proxy_set_header X-Forwarded-Proto $scheme;  # Forward the protocol (http or https)
	# 	proxy_set_header X-Forwarded-Port $server_port;  # Forward the original port
	# 	proxy_set_header X-Forwarded-Host $host;  # Forward the original host

	# 	# Handle redirects from Adminer and ensure they stay within the /adminer path
	# 	# Instead of using localhost, use the internal container name (adminer) or the proper container address
	# 	proxy_redirect http://adminer:8080/ /adminer/;  # Redirects from adminer container to /adminer/
	# 	proxy_redirect http://adminer/ /adminer/;  # If redirects from localhost are seen
	# }


    location / {
        try_files $uri $uri/ /index.php?$args;  # WordPress-spezifische Weiterleitung
    }


    # PHP-Dateien verarbeiten
    location ~ \.php$ {
        include snippets/fastcgi-php.conf;  # Enthält wichtige FastCGI-Parameter
        fastcgi_pass wp-php:9000;  # PHP-FPM-Container
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;  # Enthält Standard-FastCGI-Parameter
    }
	# pass PHP scripts to FastCGI server
	#
    # location /adminer {
	# 	rewrite ^/adminer/(.*)$ adminer.php last;
    #     proxy_pass http://adminer:8080;  # Weiterleitung an Adminer-Container
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;
    # }
	location /adminer {
		proxy_pass http://adminer:8080/adminer.php;
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;
	}

	location /website {
		proxy_pass http://static_site:81/;
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;
	}

	# Weiterleitung von statischen Dateien
	location ~* \.(css|js|jpg|jpeg|png|gif|ico|svg|woff|woff2)$ {
		root /var/www/html;  # Statische Dateien direkt vom Apache-Server
		try_files $uri $uri/ =404;  # Falls die Datei nicht existiert, gib einen 404-Fehler zurück
	}
	# 	location ~* \.(css|js|jpg|jpeg|png|gif|ico|svg|woff|woff2)$ {
	# 	proxy_pass http://adminer:8080;
	# 	proxy_set_header Host $host;
	# 	proxy_set_header X-Real-IP $remote_addr;
	# 	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	# 	proxy_set_header X-Forwarded-Proto $scheme;
	# }


	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}
}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}